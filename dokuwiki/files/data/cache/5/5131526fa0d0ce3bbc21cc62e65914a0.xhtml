
<h1 class="sectionedit1" id="backtestbacktest_moving_averagespy">Backtest: backtest_moving_averages.py</h1>
<div class="level1">
<hr />
<pre class="code python"><span class="co1">#!/usr/bin/python3</span>
&nbsp;
<span class="kw1">from</span> <span class="kw3">__future__</span> <span class="kw1">import</span> print_function
&nbsp;
<span class="kw1">from</span> pyalgotrade <span class="kw1">import</span> strategy
<span class="kw1">from</span> pyalgotrade.<span class="me1">barfeed</span> <span class="kw1">import</span> yahoofeed
&nbsp;
<span class="kw1">from</span> pyalgotrade.<span class="me1">technical</span> <span class="kw1">import</span> ma
<span class="kw1">from</span> pyalgotrade.<span class="me1">technical</span> <span class="kw1">import</span> cross
&nbsp;
<span class="kw1">from</span> pyalgotrade.<span class="me1">stratanalyzer</span> <span class="kw1">import</span> sharpe
<span class="kw1">from</span> pyalgotrade.<span class="me1">stratanalyzer</span> <span class="kw1">import</span> drawdown
<span class="kw1">from</span> pyalgotrade.<span class="me1">stratanalyzer</span> <span class="kw1">import</span> trades
<span class="kw1">from</span> pyalgotrade <span class="kw1">import</span> plotter
<span class="kw1">import</span> pyalgotrade
&nbsp;
<span class="kw1">import</span> argparse
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">import</span> <span class="kw3">os</span>
&nbsp;
<span class="kw1">import</span> <span class="kw3">time</span>
&nbsp;
<span class="kw1">import</span> pandas <span class="kw1">as</span> pd
&nbsp;
<span class="kw1">from</span> backtest_functions <span class="kw1">import</span> CreateHTMLReport
<span class="kw1">from</span> backtest_functions <span class="kw1">import</span> CreateJSONTransactionLog
<span class="kw1">from</span> backtest_functions <span class="kw1">import</span> CreateJSONTransactionLogHTML
&nbsp;
<span class="co1"># Nagios constants. </span>
&nbsp;
OK           <span class="sy0">=</span> <span class="nu0">0</span>
WARNING      <span class="sy0">=</span> <span class="nu0">1</span>
CRITICAL     <span class="sy0">=</span> <span class="nu0">2</span>
UNKNOWN      <span class="sy0">=</span> <span class="nu0">3</span>
&nbsp;
cmd_arg_help <span class="sy0">=</span> <span class="st0">&quot;Example Backtest: Buy when a moving average cross above occurs, sell when a cross below happens.&quot;</span>
strategy_name <span class="sy0">=</span> <span class="st0">&quot;Moving Averages Crossover Backtest&quot;</span>
&nbsp;
<span class="kw1">class</span> MovingAverages<span class="br0">&#40;</span>strategy.<span class="me1">BacktestingStrategy</span><span class="br0">&#41;</span>:
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> feed<span class="sy0">,</span> instrument<span class="sy0">,</span> shares<span class="sy0">,</span> capital<span class="sy0">,</span> smaPeriod<span class="sy0">,</span> tradeLog<span class="br0">&#41;</span>:
&nbsp;
        <span class="kw2">super</span><span class="br0">&#40;</span>MovingAverages<span class="sy0">,</span> <span class="kw2">self</span><span class="br0">&#41;</span>.<span class="kw4">__init__</span><span class="br0">&#40;</span>feed<span class="sy0">,</span> capital<span class="br0">&#41;</span>
&nbsp;
        <span class="kw2">self</span>.__position <span class="sy0">=</span> <span class="kw2">None</span>
        <span class="kw2">self</span>.__instrument <span class="sy0">=</span> instrument
        <span class="kw2">self</span>.__prices <span class="sy0">=</span> feed<span class="br0">&#91;</span>instrument<span class="br0">&#93;</span>.<span class="me1">getPriceDataSeries</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
        <span class="kw2">self</span>.__transactionLog <span class="sy0">=</span> tradeLog
&nbsp;
        <span class="co1"># We'll use adjusted close values instead of regular close values.</span>
        <span class="kw2">self</span>.<span class="me1">setUseAdjustedValues</span><span class="br0">&#40;</span><span class="kw2">True</span><span class="br0">&#41;</span>
&nbsp;
        <span class="kw2">self</span>.__sma <span class="sy0">=</span> ma.<span class="me1">SMA</span><span class="br0">&#40;</span><span class="kw2">self</span>.__prices<span class="sy0">,</span> smaPeriod<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">def</span> onEnterOk<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> position<span class="br0">&#41;</span>:
&nbsp;
        execInfo <span class="sy0">=</span> position.<span class="me1">getEntryOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getExecutionInfo</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        quantity <span class="sy0">=</span> <span class="kw2">str</span><span class="br0">&#40;</span>execInfo.<span class="me1">getQuantity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
        __transactionLogDict <span class="sy0">=</span> <span class="br0">&#123;</span>
                    <span class="st0">&quot;datetime&quot;</span>: <span class="kw2">str</span><span class="br0">&#40;</span>execInfo.<span class="me1">getDateTime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span>
                    <span class="st0">&quot;action&quot;</span>: <span class="st0">&quot;BUY&quot;</span><span class="sy0">,</span>
                    <span class="st0">&quot;ticker&quot;</span>: ticker<span class="sy0">,</span>
                    <span class="st0">&quot;quantity&quot;</span>: quantity<span class="sy0">,</span>
                    <span class="st0">&quot;price&quot;</span>:  <span class="kw2">round</span><span class="br0">&#40;</span>execInfo.<span class="me1">getPrice</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#41;</span>
                <span class="br0">&#125;</span>
&nbsp;
        <span class="kw2">self</span>.__transactionLog.<span class="me1">append</span><span class="br0">&#40;</span>__transactionLogDict<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">def</span> onEnterCanceled<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> position<span class="br0">&#41;</span>:
        <span class="kw2">self</span>.__position <span class="sy0">=</span> <span class="kw2">None</span>
&nbsp;
    <span class="kw1">def</span> onExitOk<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> position<span class="br0">&#41;</span>:
&nbsp;
        execInfo <span class="sy0">=</span> position.<span class="me1">getExitOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getExecutionInfo</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        quantity <span class="sy0">=</span> <span class="kw2">str</span><span class="br0">&#40;</span>execInfo.<span class="me1">getQuantity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
        __transactionLogDict <span class="sy0">=</span> <span class="br0">&#123;</span>
                    <span class="st0">&quot;datetime&quot;</span>: <span class="kw2">str</span><span class="br0">&#40;</span>execInfo.<span class="me1">getDateTime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span>
                    <span class="st0">&quot;action&quot;</span>: <span class="st0">&quot;SELL&quot;</span><span class="sy0">,</span>
                    <span class="st0">&quot;ticker&quot;</span>: ticker<span class="sy0">,</span>
                    <span class="st0">&quot;quantity&quot;</span>: quantity<span class="sy0">,</span> 
                    <span class="st0">&quot;price&quot;</span>: <span class="kw2">round</span><span class="br0">&#40;</span>execInfo.<span class="me1">getPrice</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#41;</span>
                <span class="br0">&#125;</span>
&nbsp;
        <span class="kw2">self</span>.__transactionLog.<span class="me1">append</span><span class="br0">&#40;</span>__transactionLogDict<span class="br0">&#41;</span>
&nbsp;
        <span class="kw2">self</span>.__position <span class="sy0">=</span> <span class="kw2">None</span>
&nbsp;
    <span class="kw1">def</span> onExitCanceled<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> position<span class="br0">&#41;</span>:
        <span class="co1"># If the exit was canceled, re-submit it.</span>
        <span class="kw2">self</span>.__position.<span class="me1">exitMarket</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">def</span> onBars<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> bars<span class="br0">&#41;</span>:
        <span class="co1"># If a position was not opened, check if we should enter a long position.</span>
        <span class="kw1">if</span> <span class="kw2">self</span>.__position <span class="kw1">is</span> <span class="kw2">None</span>:
&nbsp;
            <span class="kw1">if</span> cross.<span class="me1">cross_above</span><span class="br0">&#40;</span><span class="kw2">self</span>.__prices<span class="sy0">,</span> <span class="kw2">self</span>.__sma<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span>:
&nbsp;
                <span class="co1"># Enter a buy market order for n shares. The order is good till canceled.</span>
                <span class="kw2">self</span>.__position <span class="sy0">=</span> <span class="kw2">self</span>.<span class="me1">enterLong</span><span class="br0">&#40;</span><span class="kw2">self</span>.__instrument<span class="sy0">,</span> shares<span class="sy0">,</span> <span class="kw2">True</span><span class="br0">&#41;</span>
&nbsp;
        <span class="co1"># Check if we have to exit the position.</span>
        <span class="kw1">elif</span> cross.<span class="me1">cross_below</span><span class="br0">&#40;</span><span class="kw2">self</span>.__prices<span class="sy0">,</span> <span class="kw2">self</span>.__sma<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">and</span> <span class="kw1">not</span> <span class="kw2">self</span>.__position.<span class="me1">exitActive</span><span class="br0">&#40;</span><span class="br0">&#41;</span>:
&nbsp;
            <span class="kw2">self</span>.__position.<span class="me1">exitMarket</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">def</span> run_strategy<span class="br0">&#40;</span>ticker<span class="sy0">,</span> shares<span class="sy0">,</span> capital<span class="sy0">,</span> smaPeriod<span class="sy0">,</span> generate_reports<span class="br0">&#41;</span>:
&nbsp;
    <span class="co1"># Measure the execution time of the backtest.</span>
    start_time <span class="sy0">=</span> <span class="kw3">time</span>.<span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Load the bar feed from the CSV file</span>
    feed <span class="sy0">=</span> yahoofeed.<span class="me1">Feed</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    feed.<span class="me1">addBarsFromCSV</span><span class="br0">&#40;</span>ticker<span class="sy0">,</span> <span class="st0">&quot;/shark/ticker-data/&quot;</span>+ticker+<span class="st0">&quot;.AX.txt&quot;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Create a dict to store the trade log.</span>
    tradeLog <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
&nbsp;
    <span class="co1"># Evaluate the strategy with the feed.</span>
    strat <span class="sy0">=</span> MovingAverages<span class="br0">&#40;</span>feed<span class="sy0">,</span> ticker<span class="sy0">,</span> shares<span class="sy0">,</span> capital<span class="sy0">,</span> smaPeriod<span class="sy0">,</span> tradeLog<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Attach  analyzers to the strategy before executing it.</span>
    retAnalyzer <span class="sy0">=</span> pyalgotrade.<span class="me1">stratanalyzer</span>.<span class="me1">returns</span>.<span class="me1">Returns</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    strat.<span class="me1">attachAnalyzer</span><span class="br0">&#40;</span>retAnalyzer<span class="br0">&#41;</span>
&nbsp;
    sharpeRatioAnalyzer <span class="sy0">=</span> sharpe.<span class="me1">SharpeRatio</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    strat.<span class="me1">attachAnalyzer</span><span class="br0">&#40;</span>sharpeRatioAnalyzer<span class="br0">&#41;</span>
&nbsp;
    drawDownAnalyzer <span class="sy0">=</span> drawdown.<span class="me1">DrawDown</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    strat.<span class="me1">attachAnalyzer</span><span class="br0">&#40;</span>drawDownAnalyzer<span class="br0">&#41;</span>
&nbsp;
    tradesAnalyzer <span class="sy0">=</span> trades.<span class="me1">Trades</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    strat.<span class="me1">attachAnalyzer</span><span class="br0">&#40;</span>tradesAnalyzer<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Attach the plotter</span>
    plot <span class="sy0">=</span> plotter.<span class="me1">StrategyPlotter</span><span class="br0">&#40;</span>strat<span class="br0">&#41;</span>
&nbsp;
    strat.<span class="me1">run</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> <span class="kw1">not</span> generate_reports:
&nbsp;
        <span class="co1"># Save the plot.</span>
        plot.<span class="me1">savePlot</span><span class="br0">&#40;</span><span class="st0">&quot;/shark/backtest/images/&quot;</span> + ticker + <span class="st0">&quot;.png&quot;</span><span class="br0">&#41;</span> 
&nbsp;
        <span class="co1"># measure the execution time to here.</span>
        time_taken <span class="sy0">=</span> <span class="br0">&#40;</span> <span class="kw3">time</span>.<span class="kw3">time</span><span class="br0">&#40;</span><span class="br0">&#41;</span> - start_time <span class="br0">&#41;</span>
&nbsp;
        <span class="co1"># Get the number of bars in the dataframe - not ideal to load the dataframe again, so this needs to be looked at.</span>
        data <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span><span class="st0">&quot;/shark/ticker-data/&quot;</span>+ticker+<span class="st0">&quot;.AX.txt&quot;</span><span class="br0">&#41;</span>
&nbsp;
        <span class="co1"># Count the total number of rows in the DF (represents the number of BARS?)</span>
&nbsp;
        index <span class="sy0">=</span> data.<span class="me1">index</span>
        nubmerOfBars <span class="sy0">=</span> <span class="kw2">len</span><span class="br0">&#40;</span>index<span class="br0">&#41;</span>
&nbsp;
        <span class="co1"># Generate the HTML Report    </span>
        strat_name <span class="sy0">=</span> <span class="st0">&quot;moving_averages&quot;</span> <span class="co1"># It'd be nice to have this determined progmatically. </span>
&nbsp;
        CreateHTMLReport<span class="br0">&#40;</span>ticker<span class="sy0">,</span> strat<span class="sy0">,</span> retAnalyzer<span class="sy0">,</span> sharpeRatioAnalyzer<span class="sy0">,</span> drawDownAnalyzer<span class="sy0">,</span> tradesAnalyzer<span class="sy0">,</span> time_taken<span class="sy0">,</span> strat_name<span class="sy0">,</span> nubmerOfBars<span class="br0">&#41;</span>
&nbsp;
        <span class="co1"># Check if there are even any trades to report on.</span>
        <span class="kw1">if</span> tradesAnalyzer.<span class="me1">getCount</span><span class="br0">&#40;</span><span class="br0">&#41;</span>:
&nbsp;
            <span class="co1"># Generate the trade log json file.</span>
            CreateJSONTransactionLog<span class="br0">&#40;</span>tradeLog<span class="sy0">,</span> ticker<span class="br0">&#41;</span>
&nbsp;
            <span class="co1"># Generate the trade log in HTML</span>
            CreateJSONTransactionLogHTML<span class="br0">&#40;</span>ticker<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Sharpe Ratio: %.2f&quot;</span> % sharpeRatioAnalyzer.<span class="me1">getSharpeRatio</span><span class="br0">&#40;</span><span class="nu0">0.05</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> sharpeRatioAnalyzer.<span class="me1">getSharpeRatio</span><span class="br0">&#40;</span><span class="nu0">0.05</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span>: 
       <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span>OK<span class="br0">&#41;</span>
    <span class="kw1">else</span>:
       <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span>CRITICAL<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
&nbsp;
    <span class="kw3">parser</span> <span class="sy0">=</span> argparse.<span class="me1">ArgumentParser</span><span class="br0">&#40;</span>description<span class="sy0">=</span>cmd_arg_help<span class="br0">&#41;</span>
&nbsp;
    <span class="kw3">parser</span>.<span class="me1">add_argument</span><span class="br0">&#40;</span><span class="st0">&quot;-t&quot;</span><span class="sy0">,</span> <span class="st0">&quot;--ticker&quot;</span><span class="sy0">,</span> <span class="kw2">help</span><span class="sy0">=</span><span class="st0">&quot;Ticker of the stock to run the backtest against.&quot;</span><span class="br0">&#41;</span>
    <span class="kw3">parser</span>.<span class="me1">add_argument</span><span class="br0">&#40;</span><span class="st0">&quot;-s&quot;</span><span class="sy0">,</span> <span class="st0">&quot;--shares&quot;</span><span class="sy0">,</span> <span class="kw2">help</span><span class="sy0">=</span><span class="st0">&quot;The number of imaginary shares to purchase.&quot;</span><span class="br0">&#41;</span>
    <span class="kw3">parser</span>.<span class="me1">add_argument</span><span class="br0">&#40;</span><span class="st0">&quot;-c&quot;</span><span class="sy0">,</span> <span class="st0">&quot;--capital&quot;</span><span class="sy0">,</span> <span class="kw2">help</span><span class="sy0">=</span><span class="st0">&quot;The imaginary amount of capital available (in dollars).&quot;</span><span class="br0">&#41;</span>
    <span class="kw3">parser</span>.<span class="me1">add_argument</span><span class="br0">&#40;</span><span class="st0">&quot;-n&quot;</span><span class="sy0">,</span> <span class="st0">&quot;--noreport&quot;</span><span class="sy0">,</span> <span class="kw2">help</span><span class="sy0">=</span><span class="st0">&quot;Do not generate the back test report&quot;</span><span class="sy0">,</span> action<span class="sy0">=</span><span class="st0">&quot;store_false&quot;</span><span class="sy0">,</span> default<span class="sy0">=</span><span class="kw2">True</span><span class="br0">&#41;</span>
&nbsp;
    args <span class="sy0">=</span> <span class="kw3">parser</span>.<span class="me1">parse_args</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> <span class="kw1">not</span> args.<span class="me1">ticker</span>:
        <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;UNKNOWN - No ticker specified&quot;</span><span class="br0">&#41;</span>
        <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span>UNKNOWN<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> <span class="kw1">not</span> args.<span class="me1">shares</span>:
        <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;UNKNOWN - No shares specified&quot;</span><span class="br0">&#41;</span>
        <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span>UNKNOWN<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> <span class="kw1">not</span> args.<span class="me1">capital</span>:
        <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;UNKNOWN - No capital amount specified&quot;</span><span class="br0">&#41;</span>
        <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span>UNKNOWN<span class="br0">&#41;</span>
&nbsp;
    ticker <span class="sy0">=</span> args.<span class="me1">ticker</span> 
    shares <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span>args.<span class="me1">shares</span><span class="br0">&#41;</span>
    capital <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span>args.<span class="me1">capital</span><span class="br0">&#41;</span>
&nbsp;
    smaPeriod <span class="sy0">=</span> <span class="nu0">50</span>
&nbsp;
    run_strategy<span class="br0">&#40;</span>ticker<span class="sy0">,</span> shares<span class="sy0">,</span> capital<span class="sy0">,</span> smaPeriod<span class="sy0">,</span> args.<span class="me1">noreport</span><span class="br0">&#41;</span></pre>

</div>
